"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBatchChildKeys = exports.getCacheKey = exports.withCacheKey = void 0;
const tslib_1 = require("tslib");
const modules_1 = require("../../modules");
const util_1 = require("./util");
const crypto_1 = tslib_1.__importDefault(require("crypto"));
const selector_1 = require("../../modules/selector");
const util_2 = require("../../util");
const object_hash_1 = tslib_1.__importDefault(require("object-hash"));
const utils_1 = require("../ws/utils");
const baseInputParametersCachable = Object.keys(selector_1.baseInputParameters).filter((inputParam) => !util_1.excludableInternalAdapterRequestProperties.includes(inputParam));
const withCacheKey = (endpointSelector) => async (execute, context) => async (input) => {
    const endpoint = endpointSelector?.(input);
    if (!(endpoint && endpoint.inputParameters)) {
        // Fallback to legacy object hash cache key
        const cacheKey = util_1.hash(input, util_1.getHashOpts());
        const inputWithCacheKey = { ...input, debug: { ...input.debug, cacheKey } };
        return execute(inputWithCacheKey, context);
    }
    const inputParameterKeys = Object.keys(endpoint.inputParameters ?? {}).concat(baseInputParametersCachable);
    const validator = new modules_1.Validator(input, endpoint.inputParameters, {}, { shouldThrowError: false });
    const cacheKey = getCacheKey(validator.validated, inputParameterKeys);
    const batchCacheKey = endpoint.batchablePropertyPath
        ? getCacheKey(validator.validated, inputParameterKeys, endpoint.batchablePropertyPath)
        : undefined;
    const batchChildrenCacheKeys = batchCacheKey ? getBatchChildKeys(input, endpoint) : undefined;
    const inputWithCacheKey = {
        ...input,
        debug: { ...input.debug, cacheKey, batchCacheKey, batchChildrenCacheKeys },
    };
    return execute(inputWithCacheKey, context);
};
exports.withCacheKey = withCacheKey;
function getCacheKey(validatedData, inputParameterKeys, batchablePropertyPath) {
    let data = '';
    const inputParameterKeySet = new Set([...selector_1.baseInputParameterKeys, ...inputParameterKeys]);
    for (const key of inputParameterKeySet) {
        // We want the key to be consistent. So we omit batchable paths.
        // Otherwise it would change on every new child
        const isBatchableProperty = batchablePropertyPath && batchablePropertyPath.some(({ name }) => key === name);
        // Additionally, we ignore things like overrides that are not relevant to the DP request itself.
        const isExcludableProperty = util_1.excludableInternalAdapterRequestProperties.includes(key);
        if (isBatchableProperty || isExcludableProperty) {
            continue;
        }
        const value = validatedData.data[key];
        if (!value)
            continue;
        const valueString = util_2.isObject(value) ? object_hash_1.default(value) : JSON.stringify(value);
        data += valueString;
    }
    const shasum = crypto_1.default.createHash('sha1');
    shasum.update(data);
    return shasum.digest('base64');
}
exports.getCacheKey = getCacheKey;
function getBatchChildKeys(input, endpoint) {
    const children = [];
    utils_1.separateBatches(input, async (data) => {
        children.push(data);
    });
    return children.map((child) => {
        const inputParameterKeys = Object.keys(endpoint.inputParameters ?? {}).concat(baseInputParametersCachable);
        const validator = new modules_1.Validator(child, endpoint.inputParameters, {}, { shouldThrowError: false });
        return [getCacheKey(validator.validated, inputParameterKeys), child];
    });
}
exports.getBatchChildKeys = getBatchChildKeys;
//# sourceMappingURL=data:application/json;base64,