name: Publish Adapter

on:
  push:
    branches:
      - 'master'

jobs:
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - run: yarn

      - name: Generate job matrix
        id: create-matrix
        run: yarn generate:gha:matrix

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [matrix-adapters]
    name: Build and Publish (${{ matrix.adapter.shortName }})
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check whether generic adapter changed
        id: adapter_did_change
        run: ./.github/scripts/isadapterchange.sh ${{ matrix.adapter.shortName }}

      - uses: actions/setup-node@v2
        if: steps.adapter_did_change.outputs.result == 'true'
        with:
          node-version: '16.x'

      - uses: actions/cache@v2
        if: steps.adapter_did_change.outputs.result == 'true'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Yarn Dependencies
        if: steps.adapter_did_change.outputs.result == 'true'
        run: yarn

      - name: Generate docker-compose File
        if: steps.adapter_did_change.outputs.result == 'true'
        shell: bash
        run: yarn generate:docker-compose

      - name: Update dockerignore
        if: steps.adapter_did_change.outputs.result == 'true'
        run: |
          echo 'packages' >> .dockerignore
          echo '!packages/shared' >> .dockerignore
          echo '!packages/tsconfig*' >> .dockerignore
          echo '!packages/${{ matrix.adapter.shortName }}' >> .dockerignore

      - name: Build Docker Image
        if: steps.adapter_did_change.outputs.result == 'true'
        shell: bash
        env:
          DOCKER_BUILDKIT: 1
        run: docker-compose -f docker-compose.generated.yaml build ${{ matrix.adapter.name }}

      - name: Login to Public ECR
        if: steps.adapter_did_change.outputs.result == 'true'
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy Image
        if: steps.adapter_did_change.outputs.result == 'true'
        run: |
          docker tag ${{ matrix.adapter.image }} public.ecr.aws/${{ secrets.AWS_NAMESPACE }}/${{ matrix.adapter.image }}
          docker push public.ecr.aws/${{ secrets.AWS_NAMESPACE }}/${{ matrix.adapter.image }}
